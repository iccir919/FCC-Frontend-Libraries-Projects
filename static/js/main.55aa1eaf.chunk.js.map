{"version":3,"sources":["LengthInput.js","Time.js","App.js","serviceWorker.js","index.js"],"names":["LengthInput","props","id","type","onClick","onButtonClick","bind","this","length","Time","seconds","time","minutes","Math","floor","App","state","breakLength","sessionLength","timerTime","timerState","timerType","timerId","setState","startTimer","clearInterval","direction","newTime","setInterval","tick","className","changeLength","changeTimerState","reset","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.55aa1eaf.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction LengthInput(props) {\n  return (\n    <div>\n      <h2 id={`${props.type}-label`}>{`${props.type} length`}</h2>\n      <button\n        id={`${props.type}-decrement`}\n        onClick={props.onButtonClick.bind(this, \"decrease\", props.type)}\n      >\n        -\n      </button>\n      <span id={`${props.type}-length`}>{props.length}</span>\n      <button\n        id={`${props.type}-increment`}\n        onClick={props.onButtonClick.bind(this, \"increase\", props.type)}\n      >\n        +\n      </button>\n    </div>\n  );\n}\n\nexport default LengthInput;\n","import React from \"react\";\n\nfunction Time(props) {\n  let seconds = props.time % 60;\n  let minutes = Math.floor(props.time / 60);\n\n  if (seconds < 10) {\n    seconds = \"0\" + seconds;\n  }\n  if (minutes < 10) {\n    minutes = \"0\" + minutes;\n  }\n\n  return (\n    <div>\n      <h2 id=\"timer-label\">{props.type}</h2>\n      <h3 id=\"time-left\">{`${minutes}:${seconds}`}</h3>\n    </div>\n  );\n}\n\nexport default Time;\n","import React from \"react\";\nimport LengthInput from \"./LengthInput\";\nimport Time from \"./Time\";\n\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      breakLength: 5,\n      sessionLength: 25,\n      timerTime: 25 * 60,\n      timerState: \"paused\",\n      timerType: \"session\",\n      timerId: \"\"\n    };\n  }\n\n  changeTimerState() {\n    if (this.state.timerState === \"paused\") {\n      this.setState({\n        timerState: \"playing\"\n      });\n      this.startTimer();\n    } else {\n      this.setState({\n        timerState: \"paused\"\n      });\n      clearInterval(this.state.timerId);\n    }\n  }\n\n  changeLength(direction, type) {\n    if (this.state.timerState === \"playing\") return;\n\n    if (direction === \"increase\") {\n      if (this.state.breakLength === 60) return;\n      if (type === \"break\") {\n        this.setState(state => {\n          return { breakLength: state.breakLength + 1 };\n        });\n      } else {\n        if (this.state.sessionLength === 60) return;\n        this.setState(state => {\n          return {\n            sessionLength: state.sessionLength + 1,\n            timerTime: state.timerTime + 60\n          };\n        });\n      }\n    } else {\n      if (type === \"break\") {\n        if (this.state.breakLength <= 1) return;\n        this.setState(state => {\n          return { breakLength: state.breakLength - 1 };\n        });\n      } else {\n        this.setState(state => {\n          if (this.state.sessionLength <= 1) return;\n          return {\n            sessionLength: state.sessionLength - 1,\n            timerTime: state.timerTime - 60\n          };\n        });\n      }\n    }\n  }\n\n  tick() {\n    const newTime = this.state.timerTime - 1;\n    if (newTime >= 0) {\n      this.setState({\n        timerTime: newTime\n      });\n    } else {\n      clearInterval(this.state.timerId);\n      if (this.state.timerType === \"session\") {\n        this.setState(state => {\n          return { timerTime: state.breakLength * 60, timerType: \"break\" };\n        });\n      } else {\n        this.setState(state => {\n          return { timerTime: state.sessionLength * 60, timerType: \"session\" };\n        });\n      }\n      this.startTimer();\n    }\n  }\n\n  startTimer() {\n    let timerId = setInterval(() => {\n      this.tick();\n    }, 1000);\n    this.setState({\n      timerId: timerId\n    });\n  }\n\n  reset() {\n    clearInterval(this.state.timerId);\n    this.setState({\n      breakLength: 5,\n      sessionLength: 25,\n      timerTime: 25 * 60,\n      timerState: \"paused\",\n      timerType: \"session\",\n      timerId: \"\"\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Pomodoro Clock</h1>\n        <LengthInput\n          onButtonClick={this.changeLength.bind(this)}\n          type=\"break\"\n          length={this.state.breakLength}\n        />\n        <LengthInput\n          onButtonClick={this.changeLength.bind(this)}\n          type=\"session\"\n          length={this.state.sessionLength}\n        />\n        <Time time={this.state.timerTime} type={this.state.timerType} />\n        <button id=\"start_stop\" onClick={this.changeTimerState.bind(this)}>\n          {this.state.timerState === \"paused\" ? \"play\" : \"pause\"}\n        </button>\n        <button id=\"reset\" onClick={this.reset.bind(this)}>\n          reset\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}